@page "/"
@using System.Net.Http
@using BlazorInputFile

@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h1 class="leftPos" id="tvCreer">Créez votre compte</h1>
<br />
<br />

<div class="parent">
    <div class="div1">
        <div class="form-group">
            <label for="exampleInputEmail1">Adresse mail*</label>
            <input style=" background: url('resources/mail.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                   @bind="mail" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Entrer votre email">
        </div>
        <div class="form-group">
            <label for="exampleInputPassword1">Mot de passe*</label>
            <input style=" background: url('resources/pass.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                   @bind="pass" type="password" class="form-control" id="exampleInputPassword1" placeholder="Mot de passe">

        </div>
        <div class="form-group">
            <label for="confirmerMdp">Confirmer votre mot de passe*</label>
            <input style=" background: url('resources/pass.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                   @bind="passConfirm " type="password" class="form-control" id="confirmerMdp" placeholder="Entrer de nouveau votre mot de passe">
        </div>
        <div class="form-group">
            <label for="lastName">Nom*</label>
            <input @bind="lastName" type="text" class="form-control" id="lastName" placeholder="Entrer votre nom">
        </div>

        <div class="form-group">
            <label for="firstName">Prenom*</label>
            <input @bind="firstName" type="text" class="form-control" id="firstName" placeholder="Entrer votre prenom">
        </div>
    </div>

    <div class="div2">
        <div class="form-group">
            <label for="job">Quel poste occupez-vous ?</label>
            <input @bind="job" type="text" class="form-control" id="job" placeholder="Entrer votre poste">
        </div>

        <div class="form-group">
            <label for="birthDate">Date de naissance*</label>
            <input style=" background: url('resources/calendar.png');
                                background-repeat: no-repeat;
                                background-position: left;
                                background-position-x:5%;
                                background-size: 18px;
                                padding-left:15%;"
                   @bind="birthDate" type="date" class="form-control" id="birthDate" placeholder="Entrer votre date de naissance">
        </div>

        <div class="form-group">
            <label for="exampleFormControlTextarea1">Décrivez-vous en quelques mots*</label>
            <textarea @bind="desc" class="form-control" id="exampleFormControlTextarea1" rows="3"></textarea>
        </div>

        @if(!querySend) {
            <button class="btn btn-primary" @onclick="@traiterDemande">Créer mon compte</button>
            @foreach(var warn in warns) {
                <p class="alert alert-danger" role="alert">
                    @warn
                </p>
            }
        }

        @if(querySend) {
            <div class="loader" style=""></div>
        }


    </div>

    <div class="div3">
        <div class="form-group">
            <label for="avatar">Choisissez votre avatar</label>
            <InputFile OnChange="HandleFileSelected" />
        </div>
    </div>


</div>

@code{

    private string mail = "";
    private string pass = "";
    private string passConfirm = "";
    private string lastName = "";
    private string firstName = "";
    private string job = "";
    private DateTime birthDate = new DateTime();
    private string desc = "";
    private byte[] avatar;
    private bool querySend = false;

    private IList<String> warns = new List<String>();
    private IFileListEntry file;


    public void traiterDemande() {
        querySend = true;
        warns.Clear();
        verifNull();
        verifMail();
        verifPass();
        verifAvatar();
        verifDate();

        if(warns.Count == 0) {
            string hashedPass = HashFunction.hashPassword(pass, out string salt);
            var user = new {
                UserId = 0,
                Email = mail,
                Password = hashedPass,
                Salt = salt,
                BirthDate = birthDate,
                Description = desc,
                FirstName = firstName,
                LastName = lastName,
                Job = job,
                Avatar = avatar
            };

            string output = JsonConvert.SerializeObject(user);
            createUser(output);
        }
        else {
            querySend = false;
        }
        StateHasChanged();
    }

    private async Task createUser(string jsonUser) {

        List<Object> users = await Http.GetJsonAsync<List<Object>>("https://localhost:44329/api/Users");
        int countEqual = 0;
        for(int i = 0; i < users.Count; i++) {
            String userLine = users[i].ToString();
            String mailT = userLine.Split(',')[1].Split(':')[1].Split("\"")[1];
            //await jsRuntime.InvokeAsync<string>("console.log", mail);
            if(mailT.Equals(mail)) {
                countEqual++;
            }
        }
        if(countEqual == 0) {
            await Http.PostJsonAsync("https://localhost:44329/api/Users", jsonUser);
            await jsRuntime.InvokeAsync<object>("alert", "Le compte a bien été créé !");
            querySend = false;
        }
        else {
            await jsRuntime.InvokeAsync<object>("alert", "Le compte éxiste déjà !");
            querySend = false;

        }
        StateHasChanged();

    }

    public async void HandleFileSelected(IFileListEntry[] files) {
        file = files.FirstOrDefault();
        MemoryStream ms = new MemoryStream();
        await file.Data.CopyToAsync(ms);
        avatar = ms.ToArray();

    }


    public void verifNull() {
        if(desc.Trim().Equals("") || mail.Trim().Equals("") || pass.Trim().Equals("") || passConfirm.Trim().Equals("") || lastName.Trim().Equals("") ||
        firstName.Trim().Equals("") || birthDate.ToString().Trim().Equals("")) {
            warns.Add("Merci de remplir les champs obligatoires");
        }
    }

    public void verifMail() {
        Regex regex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
        Match match = regex.Match(mail);
        if(!match.Success || match == null) {
            warns.Add("Le mail " + mail + " est incorrect");
        }
    }

    public void verifPass() {
        if(pass.Trim().Length < 5 || pass == null) {
            warns.Add("Mot de passe trop court de " + (5 - pass.Trim().Length));
        }
        if(!(pass.Equals(passConfirm))) {
            warns.Add("Les mots de passe de correspondent pas");
        }
    }

    public void verifAvatar() {
        if(file == null) {
            warns.Add("Merci de fournir un avatar");
        }
        else {
            if(!file.Type.Equals("image/png") && !file.Type.Equals("image/jpg") && !file.Type.Equals("image/jpeg")) {
                warns.Add("Le type de l'avatar doit être jpg, png ou jpeg");
            }
        }

    }

    public void verifDate() {
        if(DateTime.Compare(birthDate, DateTime.Now) >= 0) {
            warns.Add("Merci d'entrer une date correcte");
        }
    }

}


